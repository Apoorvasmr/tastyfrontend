{"ast":null,"code":"import axios from 'axios'; // const LOGIN_USER_KEY = 'WD_FORUM_LOGIN_USER_KEY';\n\nvar baseURL; // if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\n//     baseURL = 'http://127.0.0.1:8000';\n// }\n// baseURL = 'https://backend-tt.herokuapp.com/';\n\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n/**\r\n * Add requireToken: true in request config, for API that required Authorization token\r\n */\n// api.interceptors.request.use(\n//     config => {\n//         if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n//             config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n//         }\n//         return config;\n//     },\n//     err => {\n//         console.error(err);\n//     }\n// );\n\nexport default class API {\n  constructor() {\n    this.getPosts = params => {\n      return api.get('/posts/', {\n        params\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n    };\n\n    this.addPost = postBody => {\n      const formData = new FormData();\n\n      for (const key in postBody) {\n        formData.append(key, postBody[key]);\n      }\n\n      return api.post('/posts/add/', formData).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n    };\n\n    this.deletePost = id => {\n      return api.delete(`/posts/delete/${id}/`).catch(error => {\n        throw new Error(error);\n      });\n    };\n\n    this.getItems = async category => {\n      let url = '/items/';\n\n      if (category) {\n        url += '?category=' + category;\n      }\n\n      const items = await api.get(url).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return items;\n    };\n\n    this.getReviews = async item_id => {\n      let url = '/reviews?item_id=' + item_id;\n      const reviews = await api.get(url).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return reviews;\n    };\n\n    this.writeReview = async (item_id, name, body, like_count) => {\n      const formData = new FormData();\n      formData.append(\"item\", item_id);\n      formData.append(\"name\", name);\n      formData.append(\"body\", body);\n      formData.append(\"like_count\", like_count);\n      const savedReview = await api.post(\"/reviews/add\", formData).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedReview;\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Apoorva/Documents/Tasty-Taters/Frontend/src/API.js"],"names":["axios","baseURL","api","create","headers","API","getPosts","params","get","then","response","data","catch","error","Error","addPost","postBody","formData","FormData","key","append","post","deletePost","id","delete","getItems","category","url","items","getReviews","item_id","reviews","writeReview","name","body","like_count","savedReview"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n// const LOGIN_USER_KEY = 'WD_FORUM_LOGIN_USER_KEY';\r\n\r\nvar baseURL;\r\n// if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\r\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\r\n// } else {\r\n//     baseURL = 'http://127.0.0.1:8000';\r\n// }\r\n// baseURL = 'https://backend-tt.herokuapp.com/';\r\nconst api = axios.create({\r\n    baseURL: baseURL,\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\n/**\r\n * Add requireToken: true in request config, for API that required Authorization token\r\n */\r\n// api.interceptors.request.use(\r\n//     config => {\r\n//         if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\r\n//             config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\r\n//         }\r\n\r\n//         return config;\r\n//     },\r\n//     err => {\r\n//         console.error(err);\r\n//     }\r\n// );\r\n\r\nexport default class API {\r\n    //////////// POST/////////////////\r\n    getPosts = params => {\r\n        return api\r\n            .get('/posts/', { params })\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => {\r\n                throw new Error(error);\r\n            });\r\n    };\r\n    addPost = postBody => {\r\n        const formData = new FormData();\r\n\r\n        for (const key in postBody) {\r\n            formData.append(key, postBody[key]);\r\n        }\r\n\r\n        return api\r\n            .post('/posts/add/', formData)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => {\r\n                throw new Error(error);\r\n            });\r\n    };\r\n    deletePost = id => {\r\n        return api.delete(`/posts/delete/${id}/`).catch(error => {\r\n            throw new Error(error);\r\n        });\r\n    };\r\n    ///////////////ITEM//////////////\r\n\r\n    getItems = async category => {\r\n        let url = '/items/';\r\n        if (category) {\r\n            url += '?category=' + category;\r\n        }\r\n        const items = await api\r\n            .get(url)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => {\r\n                throw new Error(error);\r\n            });\r\n        return items;\r\n    };\r\n    ///////////////REVIEW//////////////\r\n\r\n    getReviews = async item_id => {\r\n        let url = '/reviews?item_id=' + item_id;\r\n        const reviews = await api\r\n            .get(url)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => {\r\n                throw new Error(error);\r\n            });\r\n        return reviews;\r\n    };\r\n    ///////////////WRITE REVIEW//////////////\r\n\r\n    writeReview = async (item_id, name, body, like_count) => {\r\n        const formData = new FormData();\r\n        formData.append(\"item\", item_id);\r\n        formData.append(\"name\", name);\r\n        formData.append(\"body\", body);\r\n        formData.append(\"like_count\", like_count);\r\n        const savedReview = await api\r\n          .post(\"/reviews/add\", formData)\r\n          .then((response) => {\r\n            return response.data;\r\n          })\r\n          .catch((error) => {\r\n            throw new Error(error);\r\n          });\r\n        return savedReview;\r\n      };\r\n    }\r\n\r\n"]},"metadata":{},"sourceType":"module"}