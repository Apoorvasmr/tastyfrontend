{"ast":null,"code":"import API from '../../API'; // import { fetchItemsAction } from \"../items/actions\";\n\nimport { addCartAction, decreaseCartAction, increaseCartAction, fetchCartAction } from './actions';\nconst api = new API();\nconst CARTS_KEY = 'CARTS_KEY';\nexport const fetchFromLocalStorage = () => {\n  return async dispatch => {\n    let cartsJSON = localStorage.getItem('CARTS_KEY');\n    let carts = {};\n\n    if (cartsJSON) {\n      carts = JSON.parse(cartsJSON);\n    }\n\n    const subtotal = calculateSubtotal(carts);\n    dispatch(fetchCartAction(carts, subtotal));\n  };\n};\nexport const addCart = item => {\n  return async (dispatch, getState) => {\n    let prevCarts = getState().carts.list;\n    prevCarts[item.id] = {\n      item: item,\n      selected_count: 1\n    };\n    const subtotal = calculateSubtotal(prevCarts);\n    setToLocalStorage(prevCarts);\n    dispatch(addCartAction(prevCarts, subtotal));\n  };\n};\nexport const increaseCart = item => {\n  return async (dispatch, getState) => {\n    let prevCarts = getState().carts.list;\n    let nextSeletedCount = prevCarts[item.id].selected_count + 1;\n    prevCarts[item.id] = {\n      item: item,\n      selected_count: nextSeletedCount\n    };\n    const subtotal = calculateSubtotal(prevCarts);\n    setToLocalStorage(prevCarts);\n    dispatch(increaseCartAction(prevCarts, subtotal));\n  };\n};\nexport const decreaseCart = item => {\n  return async (dispatch, getState) => {\n    let prevCarts = getState().carts.list;\n    let nextSeletedCount = prevCarts[item.id].selected_count - 1;\n\n    if (nextSeletedCount > 0) {\n      prevCarts[item.id] = {\n        item: item,\n        selected_count: nextSeletedCount\n      };\n    } else {\n      delete prevCarts[item.id];\n    }\n\n    const subtotal = calculateSubtotal(prevCarts);\n    setToLocalStorage(prevCarts);\n    dispatch(decreaseCartAction(prevCarts, subtotal));\n  };\n};\n\nconst setToLocalStorage = carts => {\n  localStorage.setItem(CARTS_KEY, JSON.stringify(carts));\n};\n\nconst calculateSubtotal = carts => {\n  let subtotal = 0;\n  console.log(carts);\n\n  for (let key in carts) {\n    subtotal += Number(carts[key].item.price) * carts[key].selected_count;\n  }\n\n  console.log(subtotal);\n  return subtotal;\n  subtotal = '';\n};","map":{"version":3,"sources":["C:/Users/Apoorva/Documents/Tasty-Taters/Frontend/src/reducks/carts/operations.js"],"names":["API","addCartAction","decreaseCartAction","increaseCartAction","fetchCartAction","api","CARTS_KEY","fetchFromLocalStorage","dispatch","cartsJSON","localStorage","getItem","carts","JSON","parse","subtotal","calculateSubtotal","addCart","item","getState","prevCarts","list","id","selected_count","setToLocalStorage","increaseCart","nextSeletedCount","decreaseCart","setItem","stringify","console","log","key","Number","price"],"mappings":"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","sourcesContent":["import API from '../../API';\r\n// import { fetchItemsAction } from \"../items/actions\";\r\nimport { addCartAction, decreaseCartAction, increaseCartAction, fetchCartAction } from './actions';\r\n\r\nconst api = new API();\r\nconst CARTS_KEY = 'CARTS_KEY';\r\n\r\nexport const fetchFromLocalStorage = () => {\r\n    return async dispatch => {\r\n        let cartsJSON = localStorage.getItem('CARTS_KEY');\r\n        let carts = {};\r\n        if (cartsJSON) {\r\n            carts = JSON.parse(cartsJSON);\r\n        }\r\n        const subtotal = calculateSubtotal(carts);\r\n        dispatch(fetchCartAction(carts, subtotal));\r\n    };\r\n};\r\nexport const addCart = item => {\r\n    return async (dispatch, getState) => {\r\n        let prevCarts = getState().carts.list;\r\n        prevCarts[item.id] = { item: item, selected_count: 1 };\r\n        const subtotal = calculateSubtotal(prevCarts);\r\n        setToLocalStorage(prevCarts);\r\n        dispatch(addCartAction(prevCarts, subtotal));\r\n    };\r\n};\r\n\r\nexport const increaseCart = item => {\r\n    return async (dispatch, getState) => {\r\n        let prevCarts = getState().carts.list;\r\n        let nextSeletedCount = prevCarts[item.id].selected_count + 1;\r\n        prevCarts[item.id] = { item: item, selected_count: nextSeletedCount };\r\n        const subtotal = calculateSubtotal(prevCarts);\r\n        setToLocalStorage(prevCarts);\r\n        dispatch(increaseCartAction(prevCarts, subtotal));\r\n    };\r\n};\r\n\r\nexport const decreaseCart = item => {\r\n    return async (dispatch, getState) => {\r\n        let prevCarts = getState().carts.list;\r\n        let nextSeletedCount = prevCarts[item.id].selected_count - 1;\r\n        if (nextSeletedCount > 0) {\r\n            prevCarts[item.id] = { item: item, selected_count: nextSeletedCount };\r\n        } else {\r\n            delete prevCarts[item.id];\r\n        }\r\n        const subtotal = calculateSubtotal(prevCarts);\r\n        setToLocalStorage(prevCarts);\r\n        dispatch(decreaseCartAction(prevCarts, subtotal));\r\n    };\r\n};\r\nconst setToLocalStorage = carts => {\r\n    localStorage.setItem(CARTS_KEY, JSON.stringify(carts));\r\n};\r\n\r\nconst calculateSubtotal = carts => {\r\n    let subtotal = 0;\r\n    console.log(carts);\r\n    for (let key in carts) {\r\n        subtotal += Number(carts[key].item.price) * carts[key].selected_count;\r\n    }\r\n    console.log(subtotal);\r\n    return subtotal;\r\n    subtotal = '';\r\n};\r\n"]},"metadata":{},"sourceType":"module"}